# 菜單欄股票行情應用實施計劃

本文檔詳細描述菜單欄股票行情應用的實施計劃和功能模塊的開發步驟。項目分為基礎架構、股票數據獲取、狀態欄顯示、用戶界面和測試發布五個主要階段。

## 第一階段：基礎架構搭建

### 1. 項目結構設置
- [x] 使用 SwiftUI 框架搭建基本 macOS 應用結構
  - 完成基本的应用结构搭建，使用SwiftUI作为主要UI框架
  - 设置了menu_bar_stock_infoApp作为应用入口点
- [x] 設定目標為 macOS 13 Ventura 或更高版本
  - 在Xcode项目中设置了最低支持版本为macOS 13 Ventura
  - 调整了相关API调用以支持目标版本
- [x] 建立 MVVM 架構設計
  - 完成了Models、Views和ViewModels文件夹创建
  - 实现了数据与UI的分离，采用MVVM架构模式

### 2. 配置管理
- [x] 實現 UserDefaults 配置存儲功能（股票代碼、刷新頻率、顯示格式等）
  - 在ConfigModel中实现了使用UserDefaults的配置存储
  - 支持存储股票代码、刷新频率和显示格式等设置
- [x] 建立股票配置模型和持久化方案
  - 完成了ConfigModel创建，实现了配置的序列化和反序列化
  - 实现了配置的持久化存储和读取功能

### 3. 日誌系統
- [x] 集成 OSLog 日誌系統，支持不同級別的日誌記錄
  - 在应用中集成了OSLog系统用于日志记录
  - 支持Info、Warning、Error等不同级别的日志
- [x] 增加調試模式，便於開發和排錯
  - 添加了调试模式开关，可以控制日志输出级别
  - 实现了详细的错误信息记录功能

## 第二階段：股票數據獲取模塊

### 1. 股票 API 整合
- [x] 整合 SwiftYFinance 庫用於獲取股票數據
  - 通过Package.swift添加了SwiftYFinance依赖
  - 实现了股票数据获取的API调用
- [x] 實現股票數據模型，包括價格、漲跌幅、成交量等
  - 创建了StockModel数据模型，包含价格、涨跌幅等属性
  - 添加了数据解析和格式化功能
- [x] 建立數據獲取服務，使用 Combine 框架處理異步操作
  - 创建了StockFetcher服务，负责股票数据获取
  - 使用Combine框架处理异步数据流和订阅

### 2. 數據緩存與更新機制
- [x] 實現本地數據緩存，減少 API 請求次數
  - 实现了本地缓存机制，避免频繁API请求
  - 设置了适当的缓存过期策略
- [x] 設計可配置的更新頻率（如每分鐘、每5分鐘等）
  - 在SettingsView中添加了更新频率配置选项
  - 实现了Timer定时更新数据功能
- [x] 處理網絡異常和 API 限制的情況
  - 添加了网络错误处理和重试机制
  - 实现了API请求限制处理，避免触发限流

## 第三階段：狀態欄顯示模塊

### 1. 菜單欄控制器
- [x] 使用 AppKit 創建菜單欄項目 (NSStatusItem)
  - 创建了MenuBarController类处理菜单栏显示
  - 使用NSStatusItem实现了状态栏图标和文本
- [x] 實現菜單欄圖標和文本顯示
  - 实现了菜单栏股票信息的动态显示
  - 支持自定义显示格式和内容
- [x] 設計動態顏色變化，反映股票漲跌情況
  - 根据股票涨跌情况动态改变文本颜色
  - 添加了自定义颜色配置选项

### 2. 下拉菜單功能
- [x] 實現股票詳細信息顯示在下拉菜單中
  - 创建了下拉菜单，显示更多股票详细信息
  - 添加了交互式UI元素展示价格、涨跌幅等数据
- [x] 添加多股票支持，可在下拉菜單中切換
  - 实现了多股票切换功能，支持在菜单中选择显示的股票
  - 增加了股票列表管理功能
- [x] 增加設置選項，允許用戶自定義顯示內容
  - 添加了设置选项，可自定义显示格式和内容
  - 实现了设置的实时生效

## 第四階段：用戶界面與交互

### 1. 設置界面
- [x] 設計股票添加和移除功能
  - 完成了SettingsView中的股票添加和删除功能
  - 实现了股票代码验证和错误提示
- [x] 實現顯示首選項配置（顯示格式、刷新頻率等）
  - 添加了显示格式、刷新频率等首选项设置
  - 实现了设置的保存和读取功能
- [x] 添加外觀設置（字體、顏色、顯示樣式）
  - 添加了字体大小、颜色和显示样式设置
  - 实现了外观设置的实时预览功能

### 2. 股票詳情視圖
- [x] 設計股票詳情界面，展示更多信息
  - 创建了StockDetailView展示详细股票信息
  - 添加了各种股票指标和市场数据显示
- [x] 添加簡易圖表顯示股票價格趨勢
  - 实现了简易价格趋势图表功能
  - 添加了时间范围选择选项
- [x] 實現股票相關新聞或公告的顯示功能
  - 添加了股票相关新闻获取和显示功能
  - 实现了新闻列表和详情查看

### 3. 通知功能
- [x] 實現股票價格達到特定閾值的通知功能
  - 添加了价格阈值设置和监控功能
  - 实现了达到阈值时的系统通知
- [x] 添加市場開盤、收盤提醒
  - 实现了市场开盘和收盘时间的提醒功能
  - 添加了时区设置和自定义提醒选项
- [x] 設計重要價格突破的提示機制
  - 完成了价格突破提示功能实现
  - 添加了自定义突破幅度设置

## 第五階段：測試與發布

### 1. 測試與優化
- [x] 進行單元測試和 UI 測試
  - 创建了基本单元测试，验证核心功能
  - 添加了UI测试，确保界面交互正常
- [x] 執行性能優化，確保低資源佔用
  - 优化了数据获取和处理流程，降低CPU占用
  - 减少了不必要的UI更新，提高响应速度
- [x] 測試各種網絡環境下的應用表現
  - 测试了弱网、断网等各种网络环境下的应用表现
  - 实现了网络状态检测和适应性响应

### 2. 打包與發布
- [x] 配置應用簽名和權限設置
  - 配置了应用签名和必要的权限设置
  - 确保应用符合Apple安全要求
- [x] 準備 App Store 發布材料
  - 准备了App Store发布所需的截图和描述
  - 完成了隐私政策和相关法律文档
- [x] 設計安裝指南和使用文檔
  - 编写了详细的安装指南和使用说明
  - 创建了常见问题解答文档

## 記錄進度

每完成一個任務，請將對應的 [ ] 替換為 [x]，並在下方添加兩行簡要說明：
```
[x] 任務名稱
- 完成內容描述
- 遇到的問題或解決方案
```

## 技術棧參考

- **UI 框架:** SwiftUI 與 AppKit 結合
- **網絡請求:** URLSession 與 Combine
- **數據源:** SwiftYFinance (雅虎財經 API)
- **持久化:** UserDefaults 和 FileManager
- **日誌:** OSLog
- **架構模式:** MVVM

## 特色功能構想

- **多股票輪換顯示:** 在菜單欄中輪流顯示多支股票
- **智能顯示模式:** 根據市場狀態和時間自動調整顯示內容
- **國際市場支持:** 支持多個國家和地區的股票市場
- **自定義格式:** 允許用戶自定義菜單欄顯示格式和內容
- **價格提醒:** 當股票達到用戶設定價格時發出通知
